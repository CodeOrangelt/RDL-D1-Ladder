rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Checks admin emails (replace with your actual list)
    function isAdminEmail() {
      return request.auth != null && request.auth.token.email in ['admin@ladder.com', 'brian2af@outlook.com'];
    }

    // Checks user profile for specific roles
    function hasRole(userId, allowedRoles) {
      let profilePath = /databases/$(database)/documents/userProfiles/$(userId);
      return exists(profilePath) &&
             (
               (
                 (get(profilePath).data.get('roleName', '') != '' ?
                  get(profilePath).data.get('roleName', '') :
                  get(profilePath).data.get('role', '')
                 )
                 .lower()
               )
               in allowedRoles
             );
    }

    // Function to check if user can manage articles
    function canManageArticles(userId) {
      return request.auth != null && (isAdminEmail() || hasRole(userId, ['admin', 'owner', 'creative lead']));
    }

    // isAdmin function
    function isAdmin() {
      return request.auth != null && request.auth.token.email in ['admin@ladder.com', 'brian2af@outlook.com'];
    }

    // Function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // isVerifiedUser function
    function isVerifiedUser() {
      return request.auth != null;
    }

    // --- Collections ---

    // Articles Collection
    match /articles/{articleId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && canManageArticles(request.auth.uid);
    }

    // User Profiles Collection
    match /userProfiles/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        request.auth.uid == userId || 
        canManageArticles(request.auth.uid) ||
        (
          (isAdminEmail() || hasRole(request.auth.uid, ['admin', 'owner'])) &&
          request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['points', 'inventory', 'lastModified', 'lastModifiedBy', 'lastPointsModified', 'pointsInitializedAt'])
        )
      );
      allow delete: if request.auth != null && isAdminEmail();
    }

    // Match Comments Collection
    match /matchComments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.keys().hasAll(['matchId', 'userId', 'username', 'text', 'timestamp']);
      allow update: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && 
                     (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Game Invitations Collection (for the inbox system and team invitations)
    match /gameInvitations/{invitationId} {
      // Users can read invitations sent to them or sent by them
      allow read: if request.auth != null && (
        resource.data.toUserId == request.auth.uid ||
        resource.data.fromUserId == request.auth.uid ||
        isAdminEmail()
      );
      
      // Users can create invitations (sender must match auth user)
      allow create: if request.auth != null && 
        request.resource.data.fromUserId == request.auth.uid &&
        request.resource.data.keys().hasAll([
          'fromUserId', 'fromUsername', 'toUserId', 'toUsername', 
          'type', 'status', 'createdAt', 'message'
        ]) &&
        request.resource.data.status == 'pending' &&
        request.resource.data.type is string &&
        (
          // Original game invitation types
          (request.resource.data.type in ['home', 'subgame', 'subgame-home'] &&
           request.resource.data.keys().hasAll(['value'])) ||
          // Team invitation type
          (request.resource.data.type == 'team_invite' &&
           request.resource.data.keys().hasAll(['teamData']) &&
           request.resource.data.teamData.keys().hasAll(['proposedTeamName', 'teamColor', 'ladder']) &&
           request.resource.data.teamData.ladder == 'duos')
        );
      
      // Users can update invitations sent to them (to change status) or sent by them
      allow update: if request.auth != null && (
        (resource.data.toUserId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'respondedAt']) &&
        request.resource.data.status in ['accepted', 'declined']) ||
        (resource.data.fromUserId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status'])) ||
        isAdminEmail()
      );
      
      // Users can delete invitations they sent
      allow delete: if request.auth != null && (
        resource.data.fromUserId == request.auth.uid ||
        isAdminEmail()
      );
    }

    // Player Collections
    match /players/{playerId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        isAdmin() ||
        request.auth.uid == playerId ||
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['eloRating', 'lastMatchDate', 'position', 'lastMatchId', 'wins', 'losses'])
      );
      allow delete: if request.auth != null && (request.auth.uid == playerId || isAdmin());
    }

    match /playersD2/{playerId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && (request.auth.uid == playerId || isAdmin());
    }

    match /playersD3/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if request.auth != null && (
                   isAdmin() ||
                   request.auth.uid == playerId ||
                   request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['eloRating', 'lastMatch', 'wins', 'losses', 'lastEloChange', 'position'])
                   );
      allow delete: if request.auth != null && (request.auth.uid == playerId || isAdmin());
    }

    match /playersDuos/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if request.auth != null && (
                   isAdmin() ||
                   request.auth.uid == playerId ||
                   (request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['tierValue', 'lastMatchDate', 'position', 'teamId', 'teamName', 'teammate', 'hasTeam', 'teamColor'])) ||
                   (isAdmin() &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['tierValue', 'lastPromotedAt', 'promotedBy']))
                   );
      allow delete: if isAdmin();
    }

    match /playersCTF/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if request.auth != null && (
                   isAdmin() ||
                   request.auth.uid == playerId ||
                   (request.resource.data.diff(resource.data).affectedKeys()
                    .hasAll(['eloRating', 'lastMatchDate', 'position'])) ||
                   (isAdmin() &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['eloRating', 'lastPromotedAt', 'promotedBy']))
                   );
      allow delete: if isAdmin();
    }

    // Match Collections
    match /pendingMatches/{matchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }

    match /approvedMatches/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }

    match /pendingMatchesD2/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }

    match /approvedMatchesD2/{matchId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if isAdmin();
    }

    match /pendingMatchesD3/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }

    match /approvedMatchesD3/{matchId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if false;
    }

    match /pendingMatchesDuos/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }

    match /approvedMatchesDuos/{matchId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if false;
    }

    match /pendingMatchesCTF/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }

    match /approvedMatchesCTF/{matchId} {
      allow read: if true;
      allow create, update: if request.auth != null;
      allow delete: if false;
    }

    // Other Collections
    match /nonParticipants/{userId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      allow delete: if isAdmin();
    }

    match /pendingRegistrations/{registrationId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == registrationId || isAdmin());
      allow delete: if isAdmin();
    }

    match /nexus_users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /player-status/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /invites/{userId} {
      allow read, write: if true;
    }

    match /processedMatches/{matchId} {
      allow read, write: if request.auth != null;
    }

    match /readyPlayers/{userId} {
      allow read, write: if true;
    }

    match /playerStats/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && (request.auth.uid == userId || isAdmin());
    }

    match /system/{document} {
      allow read, write: if true;
    }

    match /eloHistory/{historyId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }

    match /eloHistoryD2/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /eloHistoryD3/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /retroTracker/{docId} {
      allow read: if true;
      allow create: if request.auth != null &&
                   request.resource.data.keys().hasAll(['gameName', 'players', 'timestamp']);
      allow write: if request.auth != null;
    }

    match /metadata/seasonCount {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /seasons/{seasonId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /promotionViews/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                   request.auth.token.email != null &&
                   docId.matches('promotion_.*_' + request.auth.token.email.split('@')[0]) &&
                   request.resource.data.keys().hasAll(['promotionId', 'playerName', 'views', 'createdAt', 'updatedAt']) &&
                   request.resource.data.views is number &&
                   request.resource.data.views <= 3 &&
                   request.resource.data.createdAt is timestamp &&
                   request.resource.data.updatedAt is timestamp;
    }

    match /season0/{document=**} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /season0records/{document} {
      allow read: if request.auth != null;
      allow write: if isAdmin() &&
                  request.resource.data.keys().hasAll(['records', 'archivedAt']) &&
                  request.resource.data.records is list;
    }

    match /promotionHistory/{document} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        (
          request.resource.data.keys().hasAll(['username', 'rank', 'timestamp']) &&
          request.resource.data.timestamp is timestamp &&
          request.resource.data.username is string &&
          request.resource.data.rank is string
        ) ||
        (
          request.resource.data.keys().hasAll([
            'username', 'userId', 'previousElo', 'newElo',
            'previousRank', 'newRank', 'timestamp', 'type'
          ]) &&
          request.resource.data.timestamp is timestamp &&
          request.resource.data.previousElo is number &&
          request.resource.data.newElo is number &&
          request.resource.data.type in ['promotion', 'demotion']
        )
      );
      allow update, delete: if false;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /notifiedMatches/{matchId} {
      allow read, write: if true;
    }
    
    match /notifiedMatchesD2/{matchId} {
      allow read, write: if true;
    }

    match /RejectedD1/{matchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        request.resource.data.winnerId == request.auth.uid ||
        request.resource.data.winnerEmail == request.auth.token.email ||
        (exists(/databases/$(database)/documents/players/$(request.auth.uid)) &&
         request.resource.data.winnerUsername == get(/databases/$(database)/documents/players/$(request.auth.uid)).data.username) ||
        isAdmin()
      );
      allow update, delete: if isAdmin();
    }

    match /RejectedD2/{matchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        request.resource.data.winnerId == request.auth.uid ||
        request.resource.data.winnerEmail == request.auth.token.email ||
        (exists(/databases/$(database)/documents/playersD2/$(request.auth.uid)) &&
         request.resource.data.winnerUsername == get(/databases/$(database)/documents/playersD2/$(request.auth.uid)).data.username) ||
        isAdmin()
      );
      allow update, delete: if isAdmin();
    }

    match /RejectedD3/{matchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        request.resource.data.winnerId == request.auth.uid ||
        request.resource.data.winnerEmail == request.auth.token.email ||
        (exists(/databases/$(database)/documents/playersD3/$(request.auth.uid)) &&
        request.resource.data.winnerUsername == get(/databases/$(database)/documents/playersD3/$(request.auth.uid)).data.username) ||
        isAdmin()
      );
      allow update, delete: if isAdmin();
    }

    match /userTrophies/{trophyId} {
      allow read: if true;
      allow create, update: if request.auth != null && 
                              (isAdmin() || 
                               request.auth.token.email == request.resource.data.awardedBy);
      allow delete: if request.auth != null && isAdmin();
    }
    
    match /trophyDefinitions/{trophyId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && isAdmin();
    }
    
    match /promotionNotifications/{document=**} {
      allow read, write: if true;
    }
    
    match /processedPromotions/{document=**} {
      allow read, write: if true;
    }
    
    match /highlights/{highlightId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /aggregatedMembers/{userId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }    

    match /storeItems/{itemId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && (
        isAdmin() || 
        (exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.isAdmin == true)
      );
    }

    match /pointsHistory/{historyId} {
      allow read: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner'])
      );
      allow create: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner'])
      ) && request.resource.data.keys().hasAll([
        'userId', 'previousPoints', 'newPoints', 'action', 
        'amount', 'timestamp'
      ]);
      allow update, delete: if false;
    }

    match /itemAwardHistory/{awardId} {
      allow read: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner'])
      );
      allow create: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner'])
      ) && request.resource.data.keys().hasAll([
        'userId', 'itemId', 'itemTitle', 'timestamp', 'awardedBy'
      ]);
      allow update, delete: if false;
    }

    match /playerRibbons/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner']) ||
        request.resource.data.keys().hasAll(['username', 'ladder', 'ribbons', 'lastUpdated'])
      );
      allow delete: if request.auth != null && isAdminEmail();
    }

    match /playerRibbonsD2/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner']) ||
        request.resource.data.keys().hasAll(['username', 'ladder', 'ribbons', 'lastUpdated'])
      );
      allow delete: if request.auth != null && isAdminEmail();
    }

    match /playerRibbonsD3/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner']) ||
        request.resource.data.keys().hasAll(['username', 'ladder', 'ribbons', 'lastUpdated'])
      );
      allow delete: if request.auth != null && isAdminEmail();
    }

    match /playerSeasonStats/{statsId} {
      allow read: if true;
      allow create, update: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner']) ||
        request.resource.data.keys().hasAll(['username', 'season', 'ladder'])
      );
      allow delete: if request.auth != null && isAdminEmail();
    }

    match /playerSeasonStatsD2/{statsId} {
      allow read: if true;
      allow create, update: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner']) ||
        request.resource.data.keys().hasAll(['username', 'season', 'ladder'])
      );
      allow delete: if request.auth != null && isAdminEmail();
    }

    match /playerSeasonStatsD3/{statsId} {
      allow read: if true;
      allow create, update: if request.auth != null && (
        isAdminEmail() || 
        hasRole(request.auth.uid, ['admin', 'owner']) ||
        request.resource.data.keys().hasAll(['username', 'season', 'ladder'])
      );
      allow delete: if request.auth != null && isAdminEmail();
    }
    
    match /eventVotes/{voteId}/votes/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /eventVoteSummaries/{voteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    match /eventVotes/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /eventVoteSummaries/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    match /teamsInfo/{teamId} {
      allow read: if true;
      allow create, update: if request.auth != null && 
        exists(/databases/$(database)/documents/playersDuos/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/playersDuos/$(request.auth.uid)).data.teamId == teamId;
      allow delete: if false;
    }
    
    match /badComments/{docId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.reportedBy || hasAdminRole());
    }
    
    match /playerHiatus/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userTokens/{userId} {
      allow read: if true; // Anyone (even signed out) can read
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

        // Also make sure transactions collection allows writes
    match /transactions/{docId} {
      allow read, write: if request.auth != null;
    }
  }
}