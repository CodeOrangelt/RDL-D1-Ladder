rules_version = '2';

function isAdmin() {
  let adminEmails = ['admin@ladder.com', 'brian2af@outlook.com'];
  let userEmail = request.auth.token.email.lower();
  return request.auth != null && adminEmails.hasAny([userEmail]);
}

function isVerifiedUser() {
  return request.auth != null;
}

function isSignedIn() {
  return request.auth != null;
}

function isAuthenticated() {
  return request.auth != null;
}

// Update the isMatchParticipant function
function isMatchParticipant(matchData) {
  return request.auth != null && (
    matchData.winnerEmail == request.auth.token.email ||
    matchData.loserEmail == request.auth.token.email ||
    matchData.winnerId == request.auth.uid ||
    matchData.loserId == request.auth.uid ||
    (exists(/databases/$(database)/documents/players/$(request.auth.uid)) && (
      matchData.winnerUsername == get(/databases/$(database)/documents/players/$(request.auth.uid)).data.username ||
      matchData.loserUsername == get(/databases/$(database)/documents/players/$(request.auth.uid)).data.username
    ))
  );
}

service cloud.firestore {
  match /databases/{database}/documents {
    // Global read rule - helps troubleshoot permission issues during development
    // match /{document=**} {
    //   allow read: if true;
    // }
    
    // Fix the main players collection rule to align with other divisions
    match /players/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if 
        // Admin can update anything
        isAdmin() ||
        // User can update their own document
        (isVerifiedUser() && request.auth.uid == playerId) ||
        // Anyone can update match-related fields
        (isVerifiedUser() && 
         request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['eloRating', 'lastMatchDate', 'position', 'lastMatchId', 'wins', 'losses']));
      allow delete: if isAdmin();
    }
    
    // D2 Players collection
    match /playersD2/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin() || 
                   request.auth.uid == playerId || 
                   // Allow ELO updates from matches without the undefined function
                   (request.resource.data.diff(resource.data).affectedKeys()
                    .hasAll(['eloRating', 'lastMatchDate', 'position'])) ||
                   // Allow promotions from admin
                   (isAdmin() &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['eloRating', 'lastPromotedAt', 'promotedBy']));
      allow delete: if isAdmin();
    }

    // D3 Players collection
    match /playersD3/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin() || 
                   request.auth.uid == playerId || 
                   (request.resource.data.diff(resource.data).affectedKeys()
                    .hasAll(['eloRating', 'lastMatchDate', 'position'])) ||
                   (isAdmin() &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['eloRating', 'lastPromotedAt', 'promotedBy']));
      allow delete: if isAdmin();
    }

    // Duos Players collection
    match /playersDuos/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin() || 
                   request.auth.uid == playerId || 
                   (request.resource.data.diff(resource.data).affectedKeys()
                    .hasAll(['eloRating', 'lastMatchDate', 'position'])) ||
                   (isAdmin() &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['eloRating', 'lastPromotedAt', 'promotedBy']));
      allow delete: if isAdmin();
    }

    // CTF Players collection
    match /playersCTF/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin() || 
                   request.auth.uid == playerId || 
                   (request.resource.data.diff(resource.data).affectedKeys()
                    .hasAll(['eloRating', 'lastMatchDate', 'position'])) ||
                   (isAdmin() &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['eloRating', 'lastPromotedAt', 'promotedBy']));
      allow delete: if isAdmin();
    }
    
    // Add specific rule for nonParticipants collection
    match /nonParticipants/{userId} {
      allow read: if true;  // Allow reading without authentication
      allow create: if isVerifiedUser();  // Only authenticated users can create
      allow update: if isAdmin() || request.auth.uid == userId;
      allow delete: if isAdmin();
    }
    
    // Add specific rule for pendingRegistrations collection
    match /pendingRegistrations/{registrationId} {
      allow read: if true;  // Allow reading without authentication for username checks
      allow create: if request.auth != null;  // Only authenticated users can create
      allow update: if request.auth != null && 
                   (request.auth.uid == registrationId || isAdmin());
      allow delete: if isAdmin();
    }
    
    //nexus website usernames
    match /nexus_users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
        
    //player status collection specific perms
    match /player-status/{document=**} {
      allow read: if true; // Allow anyone to read
      allow write: if request.auth != null;
    }
      
    match /invites/{userId} {
      allow read, write: if true;  // For testing - change this in production
    }
    
    //for the bot not to repeat approved matches
    match /processedMatches/{matchId} {
      allow read, write: if request.auth != null;
    }
    
    //ready status on project D
    match /readyPlayers/{userId} {
      allow read, write: if true;  // For development only
    }
    
    // Player Stats collection
    match /playerStats/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && 
        (request.auth.uid == userId || isAdmin());
    }
    
    // System documents for last processed tracking
    match /system/{document} {
      allow read, write: if true;
    }

    // Simplify pendingMatches permissions
    match /pendingMatches/{matchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Any authenticated user can update or delete pending matches
      allow update, delete: if request.auth != null;
    }

    // Fix the approvedMatches rule - consolidate duplicate rules
    match /approvedMatches/{matchId} {
      allow read: if true;
      // Any authenticated user can create approved matches
      allow create: if request.auth != null;
      // Only admins can modify or delete existing approved matches
      allow update, delete: if isAdmin();
    }

    // D2 Match Management
    match /pendingMatchesD2/{matchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        isAdmin() || 
        resource.data.winnerId == request.auth.uid ||
        resource.data.loserId == request.auth.uid ||
        // Add username-based checks as fallback
        (exists(/databases/$(database)/documents/playersD2/$(request.auth.uid)) && 
         resource.data.winnerUsername == get(/databases/$(database)/documents/playersD2/$(request.auth.uid)).data.username) ||
        (exists(/databases/$(database)/documents/playersD2/$(request.auth.uid)) && 
         resource.data.loserUsername == get(/databases/$(database)/documents/playersD2/$(request.auth.uid)).data.username)
      );
    }

    match /approvedMatchesD2/{matchId} {
      allow read: if true;
      // Fix this rule to allow match participants to create approved matches
      allow create: if request.auth != null && (
        isAdmin() || 
        request.resource.data.winnerId == request.auth.uid ||
        request.resource.data.loserId == request.auth.uid ||
        // Add username-based checks as fallback
        (exists(/databases/$(database)/documents/playersD2/$(request.auth.uid)) && 
         request.resource.data.winnerUsername == get(/databases/$(database)/documents/playersD2/$(request.auth.uid)).data.username) ||
        (exists(/databases/$(database)/documents/playersD2/$(request.auth.uid)) && 
         request.resource.data.loserUsername == get(/databases/$(database)/documents/playersD2/$(request.auth.uid)).data.username)
      );
      allow update, delete: if request.auth != null && isAdmin();
    }

    // D3 Match Management
    match /pendingMatchesD3/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null; // More permissive
    }

    match /approvedMatchesD3/{matchId} {
      allow read: if true;
      allow create, update: if request.auth != null; // More permissive
      allow delete: if false;  // Keep match history immutable
    }

    // Duos Match Management
    match /pendingMatchesDuos/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null; // More permissive
    }

    match /approvedMatchesDuos/{matchId} {
      allow read: if true;
      allow create, update: if request.auth != null; // More permissive
      allow delete: if false;  // Keep match history immutable
    }

    // CTF Match Management
    match /pendingMatchesCTF/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null; // More permissive
    }

    match /approvedMatchesCTF/{matchId} {
      allow read: if true;
      allow create, update: if request.auth != null; // More permissive
      allow delete: if false;  // Keep match history immutable
    }

    // And this for eloHistory
    match /eloHistory/{historyId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }

    match /retroTracker/{docId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.resource.data.keys().hasAll([
                     'gameName', 'players', 'timestamp'
                   ]);
      allow write: if request.auth != null;
    }

    // Season Management - Used in season-manager.js
    match /metadata/seasonCount {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /seasons/{seasonId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // User Profiles - Used in profile-viewer.js
    match /userProfiles/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && 
                           (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    match /promotionViews/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.token.email != null &&  // Ensure user has email
                   docId.matches('promotion_.*_' + request.auth.token.email.split('@')[0]) &&  // Use email username
                   request.resource.data.keys().hasAll(['promotionId', 'playerName', 'views', 'createdAt', 'updatedAt']) &&
                   request.resource.data.views is number &&
                   request.resource.data.views <= 3 &&  // Match MAX_VIEWS from promotion-banner.js
                   request.resource.data.createdAt is timestamp &&
                   request.resource.data.updatedAt is timestamp;
    }
    
    match /season0/{document=**} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /season0records/{document} {
      allow read: if request.auth != null;  // Changed from isAuthenticated() to match existing pattern
      allow write: if isAdmin() && 
                  request.resource.data.keys().hasAll(['records', 'archivedAt']) &&
                  request.resource.data.records is list;
    }
    
    // This allows a snapshot to archive season resets, malachi, you'll need to do this every time.
    match /season0records/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Remove duplicate rules and consolidate promotionHistory rules
    match /promotionHistory/{document} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (
        // Simple format
        (
          request.resource.data.keys().hasAll(['username', 'rank', 'timestamp']) &&
          request.resource.data.timestamp is timestamp &&
          request.resource.data.username is string &&
          request.resource.data.rank is string
        ) ||
        // Detailed format
        (
          request.resource.data.keys().hasAll([
            'username', 'userId', 'previousElo', 'newElo',
            'previousRank', 'newRank', 'timestamp', 'type'
          ]) &&
          request.resource.data.timestamp is timestamp &&
          request.resource.data.previousElo is number &&
          request.resource.data.newElo is number &&
          request.resource.data.type in ['promotion', 'demotion']
        )
      );
      allow update, delete: if false; // Keep history immutable
    }

    // Add a general rule for user authentication collections
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Add rule for nonParticipants
    match /nonParticipants/{userId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin() || request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    // Add this to your security rules file
    match /promotionViews/{docId} {
      // Allow read to anyone who is authenticated
      allow read: if request.auth != null;
      
      // Allow writes with proper validation
      allow write: if request.auth != null && 
                   request.resource.data.keys().hasAll(['promotionId', 'playerName', 'views', 'createdAt', 'updatedAt']) &&
                   request.resource.data.views is number &&
                   request.resource.data.views <= 10 &&
                   request.resource.data.createdAt is timestamp &&
                   request.resource.data.updatedAt is timestamp;
    }

    // Add this section for bot-specific collections
    match /approvedMatches/{matchId} {
      // Allow read access to everyone (including the bot)
      allow read: if true;
      
      // Allow create only for match participants and admins
      allow create: if request.auth != null && (
        isAdmin() || 
        request.resource.data.winnerUsername == get(/databases/$(database)/documents/players/$(request.auth.uid)).data.username ||
        request.resource.data.loserUsername == get(/databases/$(database)/documents/players/$(request.auth.uid)).data.username
      );
      
      // Allow updates and deletes only for admins
      allow update, delete: if isAdmin();
    }

    // Add this section for bot notifications tracking
    match /notifiedMatches/{matchId} {
      // Allow read and write for the bot
      allow read, write: if true;
    }
  }
}