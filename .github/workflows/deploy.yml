name: Build and Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare root files
        run: |
          # Create a temporary build directory
          mkdir -p build
          
          # Copy all directories to build directory
          cp -r ./CSS ./build/
          cp -r ./JS ./build/
          cp -r ./images ./build/
          
          # Copy all HTML files to build directory
          cp ./HTML/* ./build/
          
          # Update paths in HTML files - remove ../ since everything is now in root
          find ./build -type f -name "*.html" -exec sed -i 's/\.\.\/CSS/CSS/g' {} \;
          find ./build -type f -name "*.html" -exec sed -i 's/\.\.\/JS/JS/g' {} \;
          find ./build -type f -name "*.html" -exec sed -i 's/\.\.\/images/images/g' {} \;
          
          # Also fix any ./CSS, ./JS, ./images references to not have leading dot
          find ./build -type f -name "*.html" -exec sed -i 's/\.\/CSS/CSS/g' {} \;
          find ./build -type f -name "*.html" -exec sed -i 's/\.\/JS/JS/g' {} \;
          find ./build -type f -name "*.html" -exec sed -i 's/\.\/images/images/g' {} \;
          
          # Fix import paths in JavaScript files
          find ./build/JS -type f -name "*.js" -exec sed -i 's/from "\.\.\/JS\//from "\.\/JS\//g' {} \;
          find ./build/JS -type f -name "*.js" -exec sed -i 's/from "JS\//from "\.\/JS\//g' {} \;
          
          # Remove existing directories in root to avoid conflicts
          rm -rf ./CSS ./JS ./images
          
          # Move everything from build to root
          mv ./build/* ./
          rm -rf ./build
          
          # List directory structure for debugging
          echo "=== Directory structure after preparation ==="
          ls -la
          echo "=== CSS directory ==="
          ls -la CSS/ || echo "CSS directory not found"
          echo "=== JS directory ==="
          ls -la JS/ || echo "JS directory not found"
          echo "=== images directory ==="
          ls -la images/ || echo "images directory not found"

      - name: Remove file extensions for clean URLs
        run: |
          # Create .htaccess for clean URLs (if using Apache)
          cat > .htaccess << 'EOF'
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteRule ^([^\.]+)$ $1.html [NC,L]
          
          # Remove .html extension from URLs
          RewriteCond %{THE_REQUEST} /([^.]+)\.html [NC]
          RewriteRule ^ /%1 [NC,L,R]
          EOF
          
          # For GitHub Pages, also create extensionless copies
          for file in *.html; do
            if [[ "$file" != "index.html" ]]; then
              basename="${file%.html}"
              mkdir -p "$basename"
              cp "$file" "$basename/index.html"
            fi
          done

      - name: Create Firebase Config
        run: |
          cp JS/firebase-config.template.js JS/firebase-config.js
          sed -i 's/__FIREBASE_API_KEY__/${{ secrets.FIREBASE_API_KEY }}/g' JS/firebase-config.js
          sed -i 's/__FIREBASE_AUTH_DOMAIN__/${{ secrets.FIREBASE_AUTH_DOMAIN }}/g' JS/firebase-config.js
          sed -i 's/__FIREBASE_PROJECT_ID__/${{ secrets.FIREBASE_PROJECT_ID }}/g' JS/firebase-config.js
          sed -i 's/__FIREBASE_STORAGE_BUCKET__/${{ secrets.FIREBASE_STORAGE_BUCKET }}/g' JS/firebase-config.js
          sed -i 's/__FIREBASE_MESSAGING_SENDER_ID__/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g' JS/firebase-config.js
          sed -i 's/__FIREBASE_APP_ID__/${{ secrets.FIREBASE_APP_ID }}/g' JS/firebase-config.js
          sed -i 's/__FIREBASE_MEASUREMENT_ID__/${{ secrets.FIREBASE_MEASUREMENT_ID }}/g' JS/firebase-config.js

      - name: Obfuscate JavaScript
        uses: KevinRohn/github-action-javascript-obfuscator@v1
        with:
          input_path: JS
          output_path: JS
          compact: true
          control_flow_flattening: false
          dead_code_injection: false
          debug_protection: false
          disable_console_output: false
          identifier_names_generator: mangled
          self_defending: false
          string_array: true
          string_array_threshold: 0.5
          string_array_encoding: 'base64'
          transform_object_keys: false
          target: browser

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: 192.210.140.94
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            # Create web directory if it doesn't exist
            mkdir -p /var/www/html
            # Stop nginx/apache if running
            systemctl stop nginx 2>/dev/null || systemctl stop apache2 2>/dev/null || true
            # Clear existing files
            rm -rf /var/www/html/*

      - name: Upload files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 192.210.140.94
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          source: "./*"
          target: "/var/www/html/"
          strip_components: 0

      - name: Configure web server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: 192.210.140.94
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            # Install nginx if not present
            if ! command -v nginx &> /dev/null; then
              apt update
              apt install -y nginx
            fi
            
            # Configure nginx
            cat > /etc/nginx/sites-available/default << 'EOF'
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                root /var/www/html;
                index index.html index.htm index.nginx-debian.html;
                
                server_name _;
                
                location / {
                    try_files $uri $uri.html $uri/ =404;
                }
                
                # Remove .html extension from URLs
                location ~ ^/(.*)\.html$ {
                    return 301 /$1;
                }
            }
            EOF
            
            # Set proper permissions
            chown -R www-data:www-data /var/www/html
            chmod -R 755 /var/www/html
            
            # Start nginx
            systemctl enable nginx
            systemctl start nginx
            systemctl reload nginx